{"name":"jenkins-quickstart","tagline":"Getting started with Jenkins - Configuring Jenkins as a service with runit","body":"### Abstract\r\n\r\nThe purpose of this tutorial is to get you up and running with Jenkins as quickly as possible. Jenkins is an extendable open source continuous integration server. In this tutorial we will setup a stock Jenkins installation using runit for service management.\r\n\r\n### What You Will Learn\r\n\r\n1. How to install Jenkins\r\n2. How to setup runit to manage Jenkins\r\n\r\n### 0. Prerequisites\r\n\r\nMake sure that you java Java installed on your system. To verify that Java is installed execute the command:\r\n\r\n```\r\n# java -version\r\n```\r\n\r\nYou should see some output that looks something like this:\r\n```\r\njava version \"1.7.0_25\"\r\nOpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1~deb7u1)\r\nOpenJDK Client VM (build 23.7-b01, mixed mode, sharing)\r\n```\r\n\r\nIf you see an error, consult the documentation on how to install Java for your platform.\r\n\r\nAdditionally, you will need ```runit``` installed. If you are unfamiliar with ```runit```, you may want to read the following tutorial before continuing. \r\n\r\n[Getting started with the runit - a UNIX init scheme with service supervision](http://kchard.github.io/runit-quickstart/)\r\n\r\n### 1. Installing Jenkins\r\n\r\nThe first thing that we need to do is create a user to run Jenkins with. Add a new user named ```jenkins``` using the method provided by your Linux distrobution. For example, on Debain you can add the user with the the following command:\r\n\r\n```\r\n# adduser jenkins\r\n```\r\n\r\nNext, let's create a directory to install Jenkins in and change its ownershipt to the ```jenkins``` user. You can install Jenkins in any location you wish. I like to install it in the ```/opt``` directory. \r\n\r\n```\r\n# mkdir /opt/jenkins\r\n# chown jenkins:jenkins /opt/jenkins\r\n```\r\n\r\nThe only artifact that we need to install jenkins is the latest version of ```jenkins.war``` from the [Jenkins CI Web Site](http://jenkins-ci.org/). \r\n\r\nChange to the ```jenkins``` user, navigate to the Jenkins installation directory, and download ```jenkins.war```.\r\n\r\n```\r\n# su jenkins\r\n# cd /opt/jenkins\r\n# wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war\r\n```\r\n\r\nJenkins is provided as an executable war with an embedded web server. There is no need to deploy the war in a servlet container such as Tomcat. \r\n\r\nStart Jenkins by running the following command:\r\n```\r\n# java -jar jenkins.war\r\n```\r\n\r\nYou should see output displaying the progress of Jenkins starting up. Once you see a message like the one shown below, Jenkins will be available.\r\n```\r\nINFO: Jenkins is fully up and running\r\n```\r\n\r\nWhen you started Jenkins, the war file was expanded to the ```JENKINS_HOME``` directory. Because we did not define this environment variable, Jenkins defaults to ```~/.jenkins```. In our case this is would be ```/home/jenkins/.jenkins```. This directory will be used to store all of the data needed by Jenkins. \r\n\r\nOpen a web browser and navigate to port 8080 on your host, you should be greeted by the Jenkins home page. Take a few minutes to explore the application.\r\n\r\nWhen you are done exploring Jenkins, go ahead and shut it down by entering ```Ctrl-c``` in the terminal. \r\n\r\n### 2. Configuring runit to manage Jenkins\r\n\r\nWhile the steps described above are great to fire up Jenkins and start exploring, when deploying Jenkins for use in production this simple approach has several issues. First, to ensure high availability of our CI server we need a way to automate the management of the Jenkins process. Second, we need a way to manage logging. Finally, it is often useful to provide environment variables for customizing how Jenkins is run. By configuring Jenkins as a managed service with ```runit```, we can take care of all of these needs.\r\n\r\nIf you are still acting as the ```jenkins``` user, revert back to ```root``` so that we can configure ```runit`` to monitor Jenkins.\r\n\r\nFirst create a staging directory by executing the following:\r\n```\r\n# mkdir -p /etc/runit/jenkins\r\n```\r\n\r\nCreate a script named ```run``` in the new directory with the following contents:\r\n```\r\n#!/bin/sh -e\r\ncd /opt/jenkins\r\nexec 2>&1\r\nexec chpst -u jenkins -e /etc/runit/jenkins/env java -jar jenkins.war\r\n```\r\n\r\nNow make the script executable.\r\n```\r\n# chmod +x /etc/runit/jenkins/run\r\n```\r\n\r\nNotice the ```-e /etc/runit/jenkins/env``` argument we are passing to ```chpst```. We can use this directory to configure environment variables that will be set when executing our process.\r\n\r\nGo ahead and create the ```env``` directory.\r\n```\r\n# mkdir /etc/runit/jenkins/env\r\n```\r\n\r\nWe would like to explicitly define the ```JENKINS_HOME``` environment variable to control where Jenkins stores its data. To do this we need to create a file with the name of the environment variable in the ```env``` direcotry containing the value we would like it to be set to.\r\n\r\nSet a value for the ```JENKINS_HOME``` variable by executing the following command:\r\n```\r\n# echo /opt/jenkins/.jenkins > /etc/runit/jenkins/env/JENKINS_HOME\r\n```\r\n\r\nThis will instruct Jenkins to use ```/opt/jenkins/.jenkins``` as the home directory instead of the default. Before we continue, let's cleanup the files that Jenkins created in the default home location.\r\n\r\n```\r\n# rm -Rf /home/jenkins/.jenkins\r\n```\r\n\r\nThe only thing left to do is configure logging for the service. First create the logging configuration by making a ```log``` sub directory under ```/ect/runit/jenkins```.\r\n```\r\n# mkdir /etc/runit/jenkins/log\r\n```\r\n\r\nNext, create a script named ```run``` in the ```log``` directory with the following contents:\r\n```\r\n#!/bin/sh\r\nexec chpst -u jenkins svlogd -tt /opt/jenkins/logs\r\n```\r\n\r\nMake the script executable.\r\n```\r\n# chmod +x /etc/runit/jenkins/log/run\r\n```\r\n\r\nThe ```/opt/jenkins/logs``` directory does not exit, so create it and change its ownership to the ```jenkins``` user.\r\n```\r\n# mkdir /opt/jenkins/logs\r\n# chown jenkins:jenkins /opt/jenkins/logs\r\n```\r\n\r\nThat is all of the configuration that we need to address process management, logging, and defining environment variables. Go ahead and deploy the service by creating a symbolic link from the ```/etc/service/jenkins``` directory to our staging directory.\r\n\r\n```\r\n# ln -s /etc/runit/jenkins /etc/service/jenkins\r\n```\r\n\r\nIf everything worked, you should see information being written to the logs and Jenkins should be available on port 8080. \r\n\r\n### Continuous Integration GO!!!\r\n\r\nAt this point you have everything you need to setup a monitored Jenkins server with logging. Your next step should be to read the Jenkins documentation to configure Jenkins to suit your needs. A good place to start is the \"Use Jenkins\" wiki.\r\n\r\n[https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Use+Jenkins)\r\n\r\n### Contact Me\r\n\r\nIf you have any questions or would like further clarification, please feel free to shoot me an email. I would be glad to help. \r\n\r\nKevin\r\n\r\n<krchard@gmail.com>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}